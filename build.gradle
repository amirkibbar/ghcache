buildscript {
    repositories {
        jcenter()
		maven { url 'http://repo.spring.io/snapshot' }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.4.2.RELEASE"
    }
}

plugins {
    id "ajk.gradle.consul" version "0.1.10"
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group = "ajk.ghcache"
version = '0.0.2'

repositories {
    jcenter()
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://dl.bintray.com/amirk/maven" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-remote-shell"
    compile "org.springframework.boot:spring-boot-configuration-processor"

    compile "org.projectlombok:lombok:1.16.8"
    compile "io.dropwizard.metrics:metrics-core:3.1.2"
    compile "commons-io:commons-io:2.5"
    compile "com.google.guava:guava:19.0"

    compile "org.apache.httpcomponents:httpclient:4.5.2"
    compile "org.apache.httpcomponents:httpmime:4.5.2"
    compile "org.apache.httpcomponents:httpclient-cache:4.5.2"
    compile "org.apache.httpcomponents:fluent-hc:4.5.2"

    testCompile "org.springframework.boot:spring-boot-starter-test"
}

compileJava.dependsOn(processResources)

consul {
    version = "0.7.2"
    httpPort = 8500
    dnsPort = 8600
    consulDir = file("$rootProject.projectDir/gradle/tools/consul")
    dataDir = file("$project.buildDir/consul/data")
    configDir = file("$project.buildDir/consul/consul.d")
}

task wrapper(type: Wrapper) {
    gradleVersion = "3.2.1"
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'an exercise in API caching demonstrated on GitHub')
                root.children().last() + pomConfig
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("$buildDir/libs/ghcache-${project.version}.pom")
    }
}

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")

    publications = ['maven']

    publish = true

    pkg {
        repo = 'maven'
        name = 'ghcache'
        websiteUrl = 'https://github.com/amirkibbar/ghcache'
        issueTrackerUrl = 'https://github.com/amirkibbar/ghcache/issues'
        vcsUrl = 'https://github.com/amirkibbar/ghcache.git'
        licenses = ['Apache-2.0']
        labels = ['ghcache']
        version {
            name = project.version
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

bintrayUpload.dependsOn = [sourcesJar, javadocJar]